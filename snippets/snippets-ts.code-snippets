{
  "Functional component": {
    "prefix": "tfc",
    "body": [
      "import React, { FC } from 'react';",
      "",
      "interface I${1}Props {",
      "\t${2}",
      "};",
      "",
      "const ${1}:FC<I${1}Props> = ({}) => {",
      "\t${3}",
      "};",
      "",
      "export default ${1};"
    ]
  },
  "Functional component with use state": {
    "prefix": "tfcs",
    "body": [
      "import React, { FC, useState } from 'react';",
      "",
      "interface I${1}Props {",
      "\t${2}",
      "};",
      "",
      "const ${1}:FC<I${1}Props> = ({}) => {",
      "\tconst [${3}, set${4}] = useState($5);",
      "",
      "\t${6}",
      "};",
      "",
      "export default ${1};"
    ]
  },
  "Return of the component template": {
    "prefix": "tret",
    "body": [
      "return (",
      "\t${1}",
      ");"
    ]
  },
  "Add interface for component props": {
    "prefix": "tp",
    "body": [
      "interface I${1}Props {",
      "\t${2}",
      "};",
    ]
  },
  "use state hook typed": {
    "prefix": "rust",
    "body": [
      "const [${1}, set${2}] = useState<${3}>(${4});"
    ]
  },
  "next get server side props": {
    "prefix": "tssp",
    "body": [
      "export const getServerSideProps: GetServerSideProps = async (context) => {",
      "\t${1}",
      "};"
    ]
  },
  "next get static props": {
    "prefix": "tsp",
    "body": [
      "export const getStaticProps: GetStaticProps = async (context) => {",
      "\t${1}",
      "}"
    ]
  },
  "next get static paths": {
    "prefix": "tgp",
    "body": [
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "\t${1}",
      "}"
    ]
  }
}